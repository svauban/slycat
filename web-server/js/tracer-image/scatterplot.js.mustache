function ScatterPlot(plot_id, grid_ref, scalar) {
  console.log("Setup scatter plot");

  this.grid_ref = grid_ref; // DOM for parent
  this.plot_id = plot_id;
  this.plot_ref = "#" + plot_id;  // DOM plot ref
  this.scatterplot_obj = null;

  this.x_index = null;
  this.y_index = null;
  this.v_index = null;
  this.images_index = null;
  this.x = null;
  this.y = null;
  this.v = null;
  this.images = null;
  this.selected_simulations = null;
  this.hidden_simulations = null;

  this.ready = false;

  this.image_uri = document.createElement("a");

  this.scalar = scalar || {x:1, y:1};
  this.setup_dom();
}

ScatterPlot.prototype.show = function() {
  this.scatterplot_obj.show();
};

ScatterPlot.prototype.hide = function() {
  this.scatterplot_obj.hide();
};

ScatterPlot.prototype.setup_dom = function() {
  console.debug("setting up DOM for plot");
  //Have to initialize with the d3 builder, or doesn't want to show:
  var group = d3.select($(this.grid_ref)[0]).append("g").attr({class: "plot", id: this.plot_id});
  var pane = group.append("g").attr({class: "scatterplot-pane"});
  pane.append("g").attr({class: "load-status"});
  pane.append("g").attr({class: "scatterplot"});
};

// TODO rename since x/y labels aren't used now
ScatterPlot.prototype.setup_labels = function() {
  console.debug("setting up labels for plot");
  // choose some columns for the x and y axes.
  var numeric_variables = model.get_numeric_variables();
  this.x_index = numeric_variables[0];
  this.y_index = numeric_variables[0];
  if("x-selection-" + this.plot_id in layout.bookmark) {
    this.x_index = Number(layout.bookmark["x-selection-" + this.plot_id]);
  }
  if("y-selection-" + this.plot_id in layout.bookmark) {
    this.y_index = Number(layout.bookmark["y-selection-" + this.plot_id]);
  }
};

ScatterPlot.prototype.setup_simulations = function() {
  console.debug("setting up sims for plot");
  // set state of selected and hidden simulations
  this.selected_simulations = [];
  if("simulation-selection" in layout.bookmark)
    this.selected_simulations = layout.bookmark["simulation-selection"];
  this.hidden_simulations = [];
  if("hidden-simulations" in layout.bookmark)
    this.hidden_simulations = layout.bookmark["hidden-simulations"];
};

ScatterPlot.prototype.resize = function() {
  this.scatterplot_obj.scatterplot("option", {
    width: $(this.plot_ref + ".scatterplot-pane").width(),
    height: $(this.plot_ref + ".scatterplot-pane").height()
  });
};

ScatterPlot.prototype.update_axis = function(index, axis) {
  var self = this;
  return model.get_data_column(index, function(result) {
      self[axis] = result;
  });
};

ScatterPlot.prototype.setup = function() {
  console.debug("inside PLOT setup()");

  // Setup the scatterplot ...
  if(!this.ready && layout.bookmark && model.indices && this.x && this.y && this.v && this.images
     && (this.selected_simulations != null) && (this.hidden_simulations != null))
  {
    var self = this;
    this.ready = true;

    $(this.plot_ref + " .scatterplot-pane .load-status").hide();

    var colormap = layout.bookmark["colormap"] !== undefined ? layout.bookmark["colormap"] : "night";

    $(this.plot_ref).parents("svg").css("background", $("#color-switcher").colorswitcher("get_background", colormap).toString());

    var open_images = [];
    if("open-images-selection" in layout.bookmark) {
      open_images = layout.bookmark["open-images-selection"];
    }
    //Get the first parent that has a defined size, and fill it
    //TODO: Adjust this, the size should likely be calculated based on siblings
    var sized_parent = $("#grid-pane");

    this.scatterplot_obj = $(this.plot_ref + " .scatterplot");

    this.scatterplot_obj.scatterplot({
      scatterplot_obj: self,
      indices: model.indices,
      display_pane: "#grid-pane",
      dimension_adjustments: {
          width: function(){return 0;},
          height: function(){return -1 * $(self.grid_ref + " .controls").height(); }}, //TODO what is this doing
      x: self.x,
      y: self.y,
      v: self.v,
      t: self.t,
      images: self.images,
      width: sized_parent.width(),
      height: sized_parent.height(),
      color: $("#color-switcher").colorswitcher("get_color_map", colormap),
      selection: self.selected_simulations,
      server_root: "{{server-root}}",
      open_images: open_images,
      gradient: $("#color-switcher").colorswitcher("get_gradient_data", colormap),
      hidden_simulations: self.hidden_simulations,
      scalar: self.scalar
    });

    $(self.plot_ref + " .scatterplot").bind("selection-changed", function(event, selection) {
      self.selected_simulations_changed(selection);
    });

    // Changing the color map updates the scatterplot ...
    $("#color-switcher").bind("colormap-changed", function(event, colormap) {
      $(self.plot_ref).parents("svg").css("background", $("#color-switcher").colorswitcher("get_background", colormap).toString());
      $(self.plot_ref + " .scatterplot").scatterplot("option", {
        color:    $("#color-switcher").colorswitcher("get_color_map", colormap),
        gradient: $("#color-switcher").colorswitcher("get_gradient_data", colormap),
      });
    });

    /* TODO: implement the table controls to sync with a 'selected plot'
    // Changing the x variable updates the scatterplot ...
    $("#table").bind("x-selection-changed", function(event, variable) {
      self.update_x(variable);
    });
    // Changing the y variable updates the scatterplot ...
    $("#table").bind("y-selection-changed", function(event, variable) {
      self.update_y(variable);
    });*/

    // Changing the images variable updates the scatterplot ...
    $("#table").bind("images-selection-changed", function(event, variable) {
      console.debug("changing the images var updates the scatter plot -- ajax");
      model.get_image_column(variable, function(result){
          $(self.plot_ref + " .scatterplot").scatterplot("option", "images", result);
        }
      );
    });

    // Log changes to open images ...
    $(self.plot_ref + " .scatterplot").bind("open-images-changed", function(event, selection) {
      self.open_images_changed(selection);
    });
  }
};

ScatterPlot.prototype.selected_simulations_changed = function(selection) {
  console.debug("inside selected simulations changed");
  // Logging every selected item is too slow, so just log the count instead.
  console.debug("selectred sim changed changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/simulation/count/" + selection.length
    });
  layout.bookmarker.updateState( {"simulation-selection" : selection} );
  this.selected_simulations = selection;
};

ScatterPlot.prototype.images_selection_changed = function(variable) {
  console.debug("inside images selection changed");
  console.debug("images selection changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/images/" + variable
    });
  layout.bookmarker.updateState( {"images-selection" : variable} );
  this.y_index = Number(variable);
};

ScatterPlot.prototype.open_images_changed = function(selection) {
  console.debug("inside open images  changed");
  // Logging every open image is too slow, so just log the count instead.
  console.debug("open images changed -- ajax");
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/select/openimages/count/" + selection.length
    });
  layout.bookmarker.updateState( {"open-images-selection" : selection} );
};

ScatterPlot.prototype.hidden_simulations_changed = function() {
  console.debug("inside hidden simulations  changed");
  // Logging every hidden simulation is too slow, so just log the count instead.
  console.debug("hidden simulations changed -- ajax");
  var self = this;
  $.ajax(
    {
      type : "POST",
      url : "{{server-root}}events/models/{{_id}}/hidden/count/" + self.hidden_simulations.length
    });
  layout.bookmarker.updateState( {"hidden-simulations" : self.hidden_simulations} );
};

ScatterPlot.prototype.display_image = function(uri) {
  console.debug("inside display image");
  if(login.logged_into_host_for_file(file))
    this.load_image();
  else
    login.show_prompt([{uri: uri}], this.load_image, this);
};

ScatterPlot.prototype.image_url_for_session = function(file) {
  var sid = login.sid_for_file(file);
  return "{{server-root}}remotes/" + sid + "/file" + login.pathname_for_file(file);
}

ScatterPlot.prototype.load_image = function() {
  console.debug("inside load image");
  var sid = login.sid_for_file(file);
  image = document.createElement("img");
  image.src = "{{server-root}}remotes/" + sid + "/file" + image_uri.pathname;
  image.width = 100;
  image.style.position="absolute";
  image.style.left=10;
  image.style.top=10;
  $(this.plot_ref + " .scatterplot-pane").prepend(image);
};
